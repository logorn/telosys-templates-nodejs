/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
#set ( $uncapitalizedEntityName = ${fn.uncapitalize($entity.name)})
## 
#set ( $sqlFindAttribs = "" )
#set ( $sqlUpdateAttribs = "" )
#set ( $sqlCreateAttribs = "" )
#set ( $modelRows = "" )
#set ( $sqlInsertValues = "" )
#set ( $sqlInsertValuesWithId = "" )
##
#foreach( $attrib in $entity.attributes )
#if ( $foreach.count > 1 )
#set ( $sqlFindAttribs = $sqlFindAttribs + ", " )
#end
#set ( $sqlFindAttribs = $sqlFindAttribs + $uncapitalizedEntityName + "_" + ${fn.uncapitalize($attrib.name)} )
#end
##
#foreach( $attrib in $entity.attributes )
#if ( !$entity.keyAttributes.contains($attrib) )
#if ( !$sqlUpdateAttribs.equals("") )
#set ( $sqlUpdateAttribs = $sqlUpdateAttribs + ", " )
#end
#set ( $sqlUpdateAttribs = $sqlUpdateAttribs + $uncapitalizedEntityName + "_" + ${fn.uncapitalize($attrib.name)} )
#set ( $sqlUpdateAttribs = $sqlUpdateAttribs + "=${DOLLAR}${fn.uncapitalize($attrib.name)}" )
#end
#end
##
#foreach( $attrib in $entity.attributes )
#if ( !$entity.keyAttributes.contains($attrib) )
#if ( !$sqlCreateAttribs.equals("") )
#set ( $sqlCreateAttribs = $sqlCreateAttribs + ", " )
#end
#set ( $sqlCreateAttribs = $sqlCreateAttribs + $uncapitalizedEntityName + "_" + ${fn.uncapitalize($attrib.name)} )
#end
#end
##
#foreach( $attrib in $entity.attributes )
#if( $foreach.count > 1 )
#set ( $modelRows = $modelRows + ", " )
#end
#set ( $modelRows = $modelRows + "row." )
#set ( $modelRows = $modelRows + $uncapitalizedEntityName + "_" + ${fn.uncapitalize($attrib.name)} )
#end
##
#set ( $insertCpt = 0 )
#foreach( $attrib in $entity.attributes )
#if ( !$entity.keyAttributes.contains($attrib) )
#set ( $insertCpt = $insertCpt +1 )
#if ( $insertCpt > 1 )
#set ( $sqlInsertValues = $sqlInsertValues + ", " )
#end
#set ( $sqlInsertValues = $sqlInsertValues + ${DOLLAR}+${fn.uncapitalize($attrib.name)} )
#end
#end
##
#foreach( $attrib in $entity.attributes )
#if ( $foreach.count > 1 )
#set ( $sqlInsertValuesWithId = $sqlInsertValuesWithId + ", " )
#end
#set ( $sqlInsertValuesWithId = $sqlInsertValuesWithId + ${DOLLAR}+${fn.uncapitalize($attrib.name)} )
#end

// Load $entity entity
const $entity = require('../model/$uncapitalizedEntityName');

// Load DAO Common functions
const DaoCommon = require('./commons/daoCommon');

/**
 * DAO of entity ${entity}
 */
module.exports = class ${entity}Dao {

    constructor() {
        this.common = new DaoCommon();
    }

    /**
     * Tries to find an entity using its Id / Primary Key
     * @params id
     * @return entity
     */
    findById($fn.argumentsList($entity.keyAttributes)) {
#set ( $sqlRequestAttribs = "" )
#foreach ( $key in $entity.keyAttributes )
#if ( $foreach.count > 1 )
#set ( $sqlRequestAttribs = $sqlRequestAttribs + " AND " )
#end
#set ( $sqlRequestAttribs = $sqlRequestAttribs + $uncapitalizedEntityName + "_" + ${fn.uncapitalize($key.name)} )
#set ( $sqlRequestAttribs = $sqlRequestAttribs + "=${DOLLAR}${fn.uncapitalize($key.name)}" )
#end
       let sqlRequest = "SELECT $sqlFindAttribs FROM $uncapitalizedEntityName WHERE $sqlRequestAttribs";

       let sqlParams = {
#set ( $sqlParamsAttribs = "" )
#foreach ( $key in $entity.keyAttributes )
#if ( $foreach.count > 1 )
#set ( $sqlParamsAttribs = $sqlParamsAttribs + ",
			" )
#end
#set ( $sqlParamsAttribs = $sqlParamsAttribs + "${DOLLAR}${fn.uncapitalize($key.name)}:${fn.uncapitalize($key.name)}" )
#end
			$sqlParamsAttribs
		};
        return this.common.findOne(sqlRequest, sqlParams)
			.then(row => new ${entity}($modelRows));
    };

    /**
     * Finds all entities.
     * @return all entities
     */
    findAll() {
        let sqlRequest = "SELECT * FROM $uncapitalizedEntityName";
        return this.common.findAll(sqlRequest).then(rows => {
            let ${uncapitalizedEntityName}s = [];
            for (const row of rows) {
                ${uncapitalizedEntityName}s.push(new ${entity}($modelRows));
            }
            return ${uncapitalizedEntityName}s;
        });
    };

    /**
     * Counts all the records present in the database
     * @return count
     */
    countAll() {
        let sqlRequest = "SELECT COUNT(*) AS count FROM $uncapitalizedEntityName";
        return this.common.findOne(sqlRequest);
    };

    /**
     * Updates the given entity in the database
     * @params $entity
     * @return true if the entity has been updated, false if not found and not updated
     */
    update($entity) {
        let sqlRequest = "UPDATE $uncapitalizedEntityName SET $sqlUpdateAttribs WHERE $sqlRequestAttribs";
       
        let sqlParams = {
#foreach ( $attrib in $entity.attributes)
#set ( $uncapitalizedAttribName = ${fn.uncapitalize($attrib.name)})
 			${DOLLAR}${uncapitalizedAttribName} : ${entity}.${uncapitalizedEntityName}_${uncapitalizedAttribName},
#end
        };
        return this.common.run(sqlRequest, sqlParams);
    };

    /**
     * Creates the given entity in the database
     * @params $entity
     * returns database insertion status
     */
    create($entity) {
        let sqlRequest = "INSERT into $uncapitalizedEntityName ($sqlCreateAttribs) " +
            "VALUES ($sqlInsertValues)";
        let sqlRequest2 = "SELECT $sqlFindAttribs FROM $uncapitalizedEntityName WHERE $sqlRequestAttribs";
        let sqlParams = {
#foreach ( $attrib in $entity.attributes)
#set ( $uncapitalizedAttribName = ${fn.uncapitalize($attrib.name)})
#if ( !$entity.keyAttributes.contains($attrib) )
 			${DOLLAR}${uncapitalizedAttribName} : ${entity}.${uncapitalizedEntityName}_${uncapitalizedAttribName},
#end
#end
        };
        return this.common.run(sqlRequest, sqlParams, sqlRequest2);
    };

    /**
     * Creates the given entity with a provided id in the database
     * @params $entity
     * returns database insertion status
     */
    createWithId($entity) {
        let sqlRequest = "INSERT into $uncapitalizedEntityName ($sqlFindAttribs) " +
            "VALUES ($sqlInsertValuesWithId)";
		let sqlRequest2 = "SELECT $sqlFindAttribs FROM $uncapitalizedEntityName WHERE $sqlRequestAttribs";
        let sqlParams = {
#foreach ( $attrib in $entity.attributes)
#set ( $uncapitalizedAttribName = ${fn.uncapitalize($attrib.name)})
 			${DOLLAR}${uncapitalizedAttribName} : ${entity}.${uncapitalizedEntityName}_${uncapitalizedAttribName},
#end
        };
        return this.common.run(sqlRequest, sqlParams, sqlRequest2);
    };

    /**
     * Deletes an entity using its Id / Primary Key
     * @params id
     * returns database deletion status
     */
    deleteById($fn.argumentsList($entity.keyAttributes)) {
		let sqlRequest = "DELETE FROM $uncapitalizedEntityName WHERE $sqlRequestAttribs";
		let sqlParams = {
#set ( $sqlParamsAttribs = "" )
#foreach ( $key in $entity.keyAttributes )
#if ( $foreach.count > 1 )
#set ( $sqlParamsAttribs = $sqlParamsAttribs + ",
			" )
#end
#set ( $sqlParamsAttribs = $sqlParamsAttribs + "${DOLLAR}${fn.uncapitalize($key.name)}:${fn.uncapitalize($key.name)}" )
#end
			$sqlParamsAttribs
		};
        return this.common.run(sqlRequest, sqlParams);
    };

    /**
     * Returns true if an entity exists with the given Id / Primary Key
     * @params id
     * returns database entry existence status (true/false)
     */
    exists($fn.argumentsList($entity.keyAttributes)) {
        let sqlRequest = "SELECT (count(*) > 0) as found FROM $uncapitalizedEntityName WHERE $sqlRequestAttribs";
		let sqlParams = {
#set ( $sqlParamsAttribs = "" )
#foreach ( $key in $entity.keyAttributes )
#if ( $foreach.count > 1 )
#set ( $sqlParamsAttribs = $sqlParamsAttribs + ",
			" )
#end
#set ( $sqlParamsAttribs = $sqlParamsAttribs + "${DOLLAR}${fn.uncapitalize($key.name)}:${fn.uncapitalize($key.name)}" )
#end
			$sqlParamsAttribs
		};
        return this.common.existsOne(sqlRequest, sqlParams);
    };
};